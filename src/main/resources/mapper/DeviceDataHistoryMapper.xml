<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistoryMapper" >
  <resultMap id="BaseResultMap" type="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistory" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="device_id" property="deviceId" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="temp" property="temp" jdbcType="INTEGER" />
    <result column="humi" property="humi" jdbcType="INTEGER" />
    <result column="power" property="power" jdbcType="INTEGER" />
    <result column="shine" property="shine" jdbcType="INTEGER" />
    <result column="pressure" property="pressure" jdbcType="INTEGER" />
    <result column="smoke" property="smoke" jdbcType="SMALLINT" />
    <result column="water" property="water" jdbcType="SMALLINT" />
    <result column="electric" property="electric" jdbcType="SMALLINT" />
    <result column="body" property="body" jdbcType="SMALLINT" />
    <result column="out" property="out" jdbcType="SMALLINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="created_by" property="createdBy" jdbcType="VARCHAR" />
    <result column="updated_by" property="updatedBy" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="exportDataMap" type="com.chengqianyun.eeweb2networkadmin.biz.bean.ExportBatchDataBean" >
    <result column="deviceId" property="deviceId" jdbcType="BIGINT" />
    <result column="avgTemp" property="avgTemp" jdbcType="DOUBLE" />
    <result column="maxTemp" property="maxTemp" jdbcType="DOUBLE" />
    <result column="minTemp" property="minTemp" jdbcType="DOUBLE" />

    <result column="avgHumi" property="avgHumi" jdbcType="DOUBLE" />
    <result column="maxHumi" property="maxHumi" jdbcType="DOUBLE" />
    <result column="minHumi" property="minHumi" jdbcType="DOUBLE" />

    <result column="avgShine" property="avgShine" jdbcType="DOUBLE" />
    <result column="maxShine" property="maxShine" jdbcType="DOUBLE" />
    <result column="minShine" property="minShine" jdbcType="DOUBLE" />

    <result column="avgPressure" property="avgPressure" jdbcType="DOUBLE" />
    <result column="maxPressure" property="maxPressure" jdbcType="DOUBLE" />
    <result column="minPressure" property="minPressure" jdbcType="DOUBLE" />

  </resultMap>

  <resultMap id="apiHistoryDataMap" type="com.chengqianyun.eeweb2networkadmin.biz.bean.ApiAvgDataBean" >
    <result column="deviceId" property="deviceId" jdbcType="BIGINT" />

    <result column="avgTemp" property="tempAvg" jdbcType="INTEGER" />
    <result column="maxTemp" property="tempMax" jdbcType="INTEGER" />
    <result column="minTemp" property="tempMin" jdbcType="INTEGER" />

    <result column="avgHumi" property="humiAvg" jdbcType="INTEGER" />
    <result column="maxHumi" property="humiMax" jdbcType="INTEGER" />
    <result column="minHumi" property="humiMin" jdbcType="INTEGER" />

    <result column="avgShine" property="shineAvg" jdbcType="INTEGER" />
    <result column="maxShine" property="shineMax" jdbcType="INTEGER" />
    <result column="minShine" property="shineMin" jdbcType="INTEGER" />

    <result column="avgPressure" property="pressureAvg" jdbcType="INTEGER" />
    <result column="maxPressure" property="pressureMax" jdbcType="INTEGER" />
    <result column="minPressure" property="pressureMin" jdbcType="INTEGER" />

  </resultMap>





  <sql id="Base_Column_List" >
    id, device_id, status, temp, humi, power, shine, pressure, smoke, water, electric, body,
    `out`, created_at, updated_at, created_by, updated_by
  </sql>


  <sql id="pageSearch">
    <where>
      <if test="deviceId != null and deviceId !=''" >
        device_id = #{deviceId,jdbcType=BIGINT}
      </if>
      <if test="deviceIds != null and deviceIds !=''" >
        AND device_id in (${deviceIds})
      </if>
      <if test="startTime != null and startTime !=''" >
        AND created_at >= #{startTime}
      </if>
      <if test="endTime != null and endTime !=''" >
        AND created_at  <![CDATA[ < ]]>  #{endTime}
      </if>
    </where>
  </sql>


  <select id="findData" resultType="java.lang.Long">
    SELECT id from  t_device_data_history
   WHERE
         device_id = #{deviceId,jdbcType=BIGINT}
    AND
        created_at = #{dateStr}
   order by id desc limit 1
  </select>

  <select id="exportAvgInfo" parameterType="java.util.Map" resultMap="exportDataMap">
        select device_id deviceId ,
          round(avg(temp)/100,2) as avgTemp, round(max(temp)/100,2) as maxTemp, round(min(temp)/100,2) as minTemp,
          round(avg(humi)/100,2) as avgHumi, round(max(humi)/100,2) as maxHumi, round(min(humi)/100,2) as minHumi,
          round(avg(shine)/100,2) as avgShine, round(max(shine)/100,2) as maxShine, round(min(shine)/100,2) as minShine,
          round(avg(pressure)/100,2) as avgPressure, round(max(pressure)/100,2) as maxPressure, round(min(pressure)/100,2) as minPressure
        FROM t_device_data_history
        <include refid="pageSearch"/>
        group by device_id
  </select>


  <select id="deviceAvgInfo" parameterType="java.util.Map" resultMap="apiHistoryDataMap">
    select device_id deviceId ,
    avg(temp) as avgTemp,
    max(temp) as maxTemp,
    min(temp) as minTemp,

    avg(humi) as avgHumi,
    max(humi) as maxHumi,
    min(humi) as minHumi,

    avg(shine) as avgShine,
    max(shine) as maxShine,
    min(shine) as minShine,

    avg(pressure) as avgPressure,
    max(pressure) as maxPressure,
    min(pressure) as minPressure

    FROM t_device_data_history
    <include refid="pageSearch"/>
  </select>



  <select id="findPageCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(*) from  t_device_data_history
    <include refid="pageSearch"/>
  </select>

  <select id="findPage" parameterType="java.util.Map" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" /> from t_device_data_history
    <include refid="pageSearch"/>
    ORDER BY id ASC
    <![CDATA[ limit ${startRecord},${endRecord} ]]>
  </select>

  <select id="findPageAll" parameterType="java.util.Map" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" /> from t_device_data_history
    <include refid="pageSearch"/>
    ORDER BY id ASC
  </select>


  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_device_data_history
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_device_data_history
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <delete id="deleteByTime" parameterType="java.lang.String" >
    delete from t_device_data_history
    where created_at  <![CDATA[ < ]]>  #{maxTime}
  </delete>


  <insert id="insert" parameterType="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistory" >
    insert into t_device_data_history ( device_id, status,
      temp, humi, power, 
      shine, pressure, smoke, 
      water, electric, body,  `out`,
      created_at, updated_at, created_by, 
      updated_by)
    values (#{deviceId,jdbcType=BIGINT}, #{status,jdbcType=INTEGER},
      #{temp,jdbcType=INTEGER}, #{humi,jdbcType=INTEGER}, #{power,jdbcType=INTEGER}, 
      #{shine,jdbcType=INTEGER}, #{pressure,jdbcType=INTEGER}, #{smoke,jdbcType=SMALLINT}, 
      #{water,jdbcType=SMALLINT}, #{electric,jdbcType=SMALLINT}, #{body,jdbcType=SMALLINT}, #{out,jdbcType=SMALLINT},
      #{createdAt,jdbcType=TIMESTAMP}, now(), #{createdBy,jdbcType=VARCHAR},
      #{updatedBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistory" >
    insert into t_device_data_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="deviceId != null" >
        device_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="temp != null" >
        temp,
      </if>
      <if test="humi != null" >
        humi,
      </if>
      <if test="power != null" >
        power,
      </if>
      <if test="shine != null" >
        shine,
      </if>
      <if test="pressure != null" >
        pressure,
      </if>
      <if test="smoke != null" >
        smoke,
      </if>
      <if test="water != null" >
        water,
      </if>
      <if test="electric != null" >
        electric,
      </if>
      <if test="body != null" >
        body,
      </if>
      <if test="out != null" >
        `out`,
      </if>
        created_at,
        updated_at,
      <if test="createdBy != null" >
        created_by,
      </if>
      <if test="updatedBy != null" >
        updated_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="deviceId != null" >
        #{deviceId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="temp != null" >
        #{temp,jdbcType=INTEGER},
      </if>
      <if test="humi != null" >
        #{humi,jdbcType=INTEGER},
      </if>
      <if test="power != null" >
        #{power,jdbcType=INTEGER},
      </if>
      <if test="shine != null" >
        #{shine,jdbcType=INTEGER},
      </if>
      <if test="pressure != null" >
        #{pressure,jdbcType=INTEGER},
      </if>
      <if test="smoke != null" >
        #{smoke,jdbcType=SMALLINT},
      </if>
      <if test="water != null" >
        #{water,jdbcType=SMALLINT},
      </if>
      <if test="electric != null" >
        #{electric,jdbcType=SMALLINT},
      </if>
      <if test="body != null" >
        #{body,jdbcType=SMALLINT},
      </if>
      <if test="out != null" >
        #{out,jdbcType=SMALLINT},
      </if>
      now(),
      now(),
      <if test="createdBy != null" >
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistory" >
    update t_device_data_history
    <set >
      <if test="deviceId != null" >
        device_id = #{deviceId,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="temp != null" >
        temp = #{temp,jdbcType=INTEGER},
      </if>
      <if test="humi != null" >
        humi = #{humi,jdbcType=INTEGER},
      </if>
      <if test="power != null" >
        power = #{power,jdbcType=INTEGER},
      </if>
      <if test="shine != null" >
        shine = #{shine,jdbcType=INTEGER},
      </if>
      <if test="pressure != null" >
        pressure = #{pressure,jdbcType=INTEGER},
      </if>
      <if test="smoke != null" >
        smoke = #{smoke,jdbcType=SMALLINT},
      </if>
      <if test="water != null" >
        water = #{water,jdbcType=SMALLINT},
      </if>
      <if test="electric != null" >
        electric = #{electric,jdbcType=SMALLINT},
      </if>
      <if test="body != null" >
        body = #{body,jdbcType=SMALLINT},
      </if>
      <if test="out != null" >
        `out` = #{out,jdbcType=SMALLINT},
      </if>
        updated_at = now(),
      <if test="updatedBy != null" >
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chengqianyun.eeweb2networkadmin.biz.entitys.DeviceDataHistory" >
    update t_device_data_history
    set device_id = #{deviceId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      temp = #{temp,jdbcType=INTEGER},
      humi = #{humi,jdbcType=INTEGER},
      power = #{power,jdbcType=INTEGER},
      shine = #{shine,jdbcType=INTEGER},
      pressure = #{pressure,jdbcType=INTEGER},
      smoke = #{smoke,jdbcType=SMALLINT},
      water = #{water,jdbcType=SMALLINT},
      electric = #{electric,jdbcType=SMALLINT},
      body = #{body,jdbcType=SMALLINT},
      `out` = #{out,jdbcType=SMALLINT},
      updated_at = now(),
      updated_by = #{updatedBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>